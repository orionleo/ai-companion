generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    password      String?
    accounts      Account[]
    sessions      Session[]
    companion     Companion[]

    tokens Int @default(10)
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Category {
    id         String      @id @default(uuid())
    name       String
    companions Companion[] // Remove references argument here
}

model Companion {
    id           String @id @default(uuid())
    userId       String
    userName     String
    src          String
    name         String @db.Text
    description  String
    instructions String @db.Text
    seed         String @db.Text

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    categories Category[]

    messages Message[]
    User     User      @relation(fields: [userId], references: [id])

    @@unique([userId, id])
    @@index([userId])
    @@fulltext([name])
}

enum Role {
    user
    system
}

model Message {
    id        String   @id @default(uuid())
    role      Role
    content   String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    companionId String
    userId      String

    companion Companion @relation(fields: [companionId], references: [id], onDelete: Cascade)

    @@index([companionId])
}

model UserSubscription {
    id                     String    @id @default(cuid())
    userId                 String    @unique
    stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
    stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
    stripePriceId          String?   @map(name: "stripe_price_id")
    stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}
